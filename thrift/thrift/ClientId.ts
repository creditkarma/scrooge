/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 952e3625feae4a1a9eeaf4a75d413531b1770809
 *   built at: 20170404-132117
 */
/**
 * At connection time, we can let the server know who we are so
 * they can book keep and optionally reject unknown clients.
 */


import thrift from 'thrift'
import {Thrift, Protocol, Int64} from 'thrift'



export interface IClientIdArgs {
    name: string
}

export class ClientId {
    public name: string
    // If possible, populate this with .populate method instead so that
    // we can ensure the struct is constructed correctly
constructor(args?: IClientIdArgs) {
        if (args) {
            if (args.name != null) {
                this.name = args.name
            }
        }
    }
    populate(args: IClientIdArgs) {
            if (args.name != null) {
                this.name = args.name
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
    const {ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.name = input.readString()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("ClientId")
        if (this.name != null) {
            if (this.name !== null) {
                const name_item = this.name
                output.writeFieldBegin("name", Thrift.Type.STRING, 1)
                output.writeString(name_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}