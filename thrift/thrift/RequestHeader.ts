/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 952e3625feae4a1a9eeaf4a75d413531b1770809
 *   built at: 20170404-132117
 */
/**
 * The following are for finagle-thrift specific tracing headers &
 * negotiation.
 */
/**
 * RequestHeader defines headers for the request. These carry the span data, and
 * a flag indicating whether the request is to be debugged.
 */


import thrift from 'thrift'
import {Thrift, Protocol, Int64} from 'thrift'

import {ClientId} from './ClientId'
import {Delegation} from './Delegation'
import {RequestContext} from './RequestContext'

export interface IRequestHeaderArgs {
    traceId: Int64
    spanId: Int64
    parentSpanId?: Int64
    sampled?: boolean
    clientId?: ClientId
    flags?: Int64
    contexts: Array<RequestContext>
    dest?: string
    delegations?: Array<Delegation>
}

export class RequestHeader {
    public traceId: Int64
    public spanId: Int64
    public parentSpanId: Int64
    public sampled: boolean
    public clientId: ClientId
    public flags: Int64
    public contexts: Array<RequestContext>
    public dest: string
    public delegations: Array<Delegation>
    // If possible, populate this with .populate method instead so that
    // we can ensure the struct is constructed correctly
constructor(args?: IRequestHeaderArgs) {
        if (args) {
            if (args.traceId != null) {
                this.traceId = args.traceId
            }
            if (args.spanId != null) {
                this.spanId = args.spanId
            }
            if (args.parentSpanId != null) {
                this.parentSpanId = args.parentSpanId
            }
            if (args.sampled != null) {
                this.sampled = args.sampled
            }
            if (args.clientId != null) {
                this.clientId = args.clientId
            }
            if (args.flags != null) {
                this.flags = args.flags
            }
            if (args.contexts != null) {
                this.contexts = args.contexts
            }
            if (args.dest != null) {
                this.dest = args.dest
            }
            if (args.delegations != null) {
                this.delegations = args.delegations
            }
        }
    }
    populate(args: IRequestHeaderArgs) {
            if (args.traceId != null) {
                this.traceId = args.traceId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceId is unset!')
            }
            if (args.spanId != null) {
                this.spanId = args.spanId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spanId is unset!')
            }
            if (args.parentSpanId != null) {
                this.parentSpanId = args.parentSpanId
            }
            if (args.sampled != null) {
                this.sampled = args.sampled
            }
            if (args.clientId != null) {
                this.clientId = args.clientId
            }
            if (args.flags != null) {
                this.flags = args.flags
            }
            if (args.contexts != null) {
                this.contexts = args.contexts
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contexts is unset!')
            }
            if (args.dest != null) {
                this.dest = args.dest
            }
            if (args.delegations != null) {
                this.delegations = args.delegations
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
    const {ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.traceId = input.readI64()
                    break
                case 2:
                    this.spanId = input.readI64()
                    break
                case 3:
                    this.parentSpanId = input.readI64()
                    break
                case 5:
                    this.sampled = input.readBool()
                    break
                case 6:
                    this.clientId = (() => {
                        const struct = new ClientId()
                        struct.read(input)
                        return struct
                    })()
                    break
                case 7:
                    this.flags = input.readI64()
                    break
                case 8:
                    this.contexts = (() => {
                        const meta = input.readListBegin()
                        const elems = new Array<RequestContext>()
                        for (let i = 0; i < meta.size; i++) {
                            const elem = (() => {
                        const struct = new RequestContext()
                        struct.read(input)
                        return struct
                    })()
                    
                            elems.push(elem)
                        }
                        input.readListEnd()
                        return elems
                    })()
                    break
                case 9:
                    this.dest = input.readString()
                    break
                case 10:
                    this.delegations = (() => {
                        const meta = input.readListBegin()
                        const elems = new Array<Delegation>()
                        for (let i = 0; i < meta.size; i++) {
                            const elem = (() => {
                        const struct = new Delegation()
                        struct.read(input)
                        return struct
                    })()
                    
                            elems.push(elem)
                        }
                        input.readListEnd()
                        return elems
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("RequestHeader")
        if (this.traceId != null) {
            if (true) {
                const traceId_item = this.traceId
                output.writeFieldBegin("traceId", Thrift.Type.I64, 1)
                output.writeI64(traceId_item)
                output.writeFieldEnd()
            }
        }
        if (this.spanId != null) {
            if (true) {
                const spanId_item = this.spanId
                output.writeFieldBegin("spanId", Thrift.Type.I64, 2)
                output.writeI64(spanId_item)
                output.writeFieldEnd()
            }
        }
        if (this.parentSpanId != null) {
            if (this.parentSpanId !== undefined) {
                const parentSpanId_item = this.parentSpanId
                output.writeFieldBegin("parentSpanId", Thrift.Type.I64, 3)
                output.writeI64(parentSpanId_item)
                output.writeFieldEnd()
            }
        }
        if (this.sampled != null) {
            if (this.sampled !== undefined) {
                const sampled_item = this.sampled
                output.writeFieldBegin("sampled", Thrift.Type.BOOL, 5)
                output.writeBool(sampled_item)
                output.writeFieldEnd()
            }
        }
        if (this.clientId != null) {
            if (this.clientId !== undefined) {
                const clientId_item = this.clientId
                output.writeFieldBegin("clientId", Thrift.Type.STRUCT, 6)
                clientId_item.write(output)
                output.writeFieldEnd()
            }
        }
        if (this.flags != null) {
            if (this.flags !== undefined) {
                const flags_item = this.flags
                output.writeFieldBegin("flags", Thrift.Type.I64, 7)
                output.writeI64(flags_item)
                output.writeFieldEnd()
            }
        }
        if (this.contexts != null) {
            if (this.contexts !== null) {
                const contexts_item = this.contexts
                output.writeFieldBegin("contexts", Thrift.Type.LIST, 8)
                output.writeListBegin(Thrift.Type.STRUCT, contexts_item.length)
                for (let i = 0; i < contexts_item.length; i++) {
                    const contexts_item_element = contexts_item[i]
                    contexts_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        if (this.dest != null) {
            if (this.dest !== undefined) {
                const dest_item = this.dest
                output.writeFieldBegin("dest", Thrift.Type.STRING, 9)
                output.writeString(dest_item)
                output.writeFieldEnd()
            }
        }
        if (this.delegations != null) {
            if (this.delegations !== undefined) {
                const delegations_item = this.delegations
                output.writeFieldBegin("delegations", Thrift.Type.LIST, 10)
                output.writeListBegin(Thrift.Type.STRUCT, delegations_item.length)
                for (let i = 0; i < delegations_item.length; i++) {
                    const delegations_item_element = delegations_item[i]
                    delegations_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}