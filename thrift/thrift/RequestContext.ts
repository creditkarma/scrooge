/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: b5540a5ea44ab683c536210956fb2e7c3497b122
 *   built at: 20170330-131250
 */
/**
 * This struct serializes com.twitter.finagle.Context
 */


import thrift from 'thrift'
import {Thrift, Protocol} from 'thrift'



export interface IRequestContextArgs {
    key: Buffer
    value: Buffer
}

export class RequestContext {
    public key: Buffer
    public value: Buffer
    constructor(args: IRequestContextArgs) {
            if (args.key != null) {
                this.key = args.key
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!')
            }
            if (args.value != null) {
                this.value = args.value
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.key = input.readBinary()
                    break
                case 2:
                    this.value = input.readBinary()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("RequestContext")
        if (this.key != null) {
            if (this.key !== null) {
                const key_item = this.key
                output.writeFieldBegin("key", Thrift.Type.STRING, 1)
                output.writeBinary(key_item)
                output.writeFieldEnd()
            }
        }
        if (this.value != null) {
            if (this.value !== null) {
                const value_item = this.value
                output.writeFieldBegin("value", Thrift.Type.STRING, 2)
                output.writeBinary(value_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}