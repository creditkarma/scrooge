/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 952e3625feae4a1a9eeaf4a75d413531b1770809
 *   built at: 20170404-132117
 */
/**
 * Binary annotations are tags applied to a Span to give it context. For
 * example, a binary annotation of "http.uri" could the path to a resource in a
 * RPC call.
 *
 * Binary annotations of type STRING are always queryable, though more a
 * historical implementation detail than a structural concern.
 *
 * Binary annotations can repeat, and vary on the host. Similar to Annotation,
 * the host indicates who logged the event. This allows you to tell the
 * difference between the client and server side of the same key. For example,
 * the key "http.uri" might be different on the client and server side due to
 * rewriting, like "/api/v1/myresource" vs "/myresource. Via the host field,
 * you can see the different points of view, which often help in debugging.
 */


import thrift from 'thrift'
import {Thrift, Protocol, Int64} from 'thrift'

import {AnnotationType} from './AnnotationType'
import {Endpoint} from './Endpoint'

export interface IBinaryAnnotationArgs {
    key: string
    value: Buffer
    annotationType: thrift.AnnotationType
    host?: Endpoint
}

export class BinaryAnnotation {
    public key: string
    public value: Buffer
    public annotationType: thrift.AnnotationType
    public host: Endpoint
    // If possible, populate this with .populate method instead so that
    // we can ensure the struct is constructed correctly
constructor(args?: IBinaryAnnotationArgs) {
        if (args) {
            if (args.key != null) {
                this.key = args.key
            }
            if (args.value != null) {
                this.value = args.value
            }
            if (args.annotationType != null) {
                this.annotationType = args.annotationType
            }
            if (args.host != null) {
                this.host = args.host
            }
        }
    }
    populate(args: IBinaryAnnotationArgs) {
            if (args.key != null) {
                this.key = args.key
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!')
            }
            if (args.value != null) {
                this.value = args.value
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!')
            }
            if (args.annotationType != null) {
                this.annotationType = args.annotationType
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field annotationType is unset!')
            }
            if (args.host != null) {
                this.host = args.host
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
    const {ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.key = input.readString()
                    break
                case 2:
                    this.value = input.readBinary()
                    break
                case 3:
                    this.annotationType = input.readI32()
                    break
                case 4:
                    this.host = (() => {
                        const struct = new Endpoint()
                        struct.read(input)
                        return struct
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("BinaryAnnotation")
        if (this.key != null) {
            if (this.key !== null) {
                const key_item = this.key
                output.writeFieldBegin("key", Thrift.Type.STRING, 1)
                output.writeString(key_item)
                output.writeFieldEnd()
            }
        }
        if (this.value != null) {
            if (this.value !== null) {
                const value_item = this.value
                output.writeFieldBegin("value", Thrift.Type.STRING, 2)
                output.writeBinary(value_item)
                output.writeFieldEnd()
            }
        }
        if (this.annotationType != null) {
            if (this.annotationType !== null) {
                const annotationType_item = this.annotationType
                output.writeFieldBegin("annotationType", Thrift.Type.I32, 3)
                output.writeI32(annotationType_item)
                output.writeFieldEnd()
            }
        }
        if (this.host != null) {
            if (this.host !== undefined) {
                const host_item = this.host
                output.writeFieldBegin("host", Thrift.Type.STRUCT, 4)
                host_item.write(output)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}