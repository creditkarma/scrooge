/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: eb527853cd68a47db6989d5d8ad99cf9fd1e2a1b
 *   built at: 20170322-114513
 */
/**
 * Binary annotations are tags applied to a Span to give it context. For
 * example, a binary annotation of "http.uri" could the path to a resource in a
 * RPC call.
 *
 * Binary annotations of type STRING are always queryable, though more a
 * historical implementation detail than a structural concern.
 *
 * Binary annotations can repeat, and vary on the host. Similar to Annotation,
 * the host indicates who logged the event. This allows you to tell the
 * difference between the client and server side of the same key. For example,
 * the key "http.uri" might be different on the client and server side due to
 * rewriting, like "/api/v1/myresource" vs "/myresource. Via the host field,
 * you can see the different points of view, which often help in debugging.
 */


import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {AnnotationType} from './AnnotationType'
import {Endpoint} from './Endpoint'

export class BinaryAnnotation {
    public key: string
    public value: Buffer
    public annotationType: thrift.AnnotationType
    public host: Endpoint
    constructor(args?) {
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            input.skip(ftype)
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("BinaryAnnotation")
        if (this.key !== null && this.key !== undefined) {
            // writing key
            if (this.key !== null) {
                const key_item = this.key
                output.writeFieldBegin("key", Thrift.Type.STRING, 1)
                // isList: false, isSet: false, isMap: false, isStruct: false, isEnum: false, isBase: ?
                output.writeString(key_item)
                output.writeFieldEnd()
            }
        }
        if (this.value !== null && this.value !== undefined) {
            // writing value
            if (this.value !== null) {
                const value_item = this.value
                output.writeFieldBegin("value", Thrift.Type.STRING, 2)
                // isList: false, isSet: false, isMap: false, isStruct: false, isEnum: false, isBase: ?
                output.writeBinary(value_item)
                output.writeFieldEnd()
            }
        }
        if (this.annotationType !== null && this.annotationType !== undefined) {
            // writing annotationType
            if (this.annotationType !== null) {
                const annotationType_item = this.annotationType
                output.writeFieldBegin("annotationType", Thrift.Type.ENUMI32, 3)
                // isList: false, isSet: false, isMap: false, isStruct: false, isEnum: ?, isBase: false
                // enum Handled by `libthrift` in Node
                output.writeFieldEnd()
            }
        }
        if (this.host !== null && this.host !== undefined) {
            // writing host
            if (this.host !== undefined) {
                const host_item = this.host
                output.writeFieldBegin("host", Thrift.Type.STRUCT, 4)
                // isList: false, isSet: false, isMap: false, isStruct: ?, isEnum: false, isBase: false
                host_item.write(output)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}