/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 5b0cb3ee0c7699372f2c21cf043ce2b0e7892346
 *   built at: 20170323-104620
 */
/**
 * An annotation is similar to a log statement. It includes a host field which
 * allows these events to be attributed properly, and also aggregatable.
 */


import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {Endpoint} from './Endpoint'

export class Annotation {
    public timestamp: number
    public value: string
    public host: Endpoint
    constructor(args?) {
        if (args) {
            if (args.timestamp !== undefined && args.timestamp !== null) {
                this.timestamp = args.timestamp
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!')
            }
            if (args.value !== undefined && args.value !== null) {
                this.value = args.value
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!')
            }
            if (args.host !== undefined && args.host !== null) {
                this.host = args.host
            }
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.timestamp = input.readI64()
                    break
                case 2:
                    this.value = input.readString()
                    break
                case 3:
                    this.host = (() => {
                        const struct = new Endpoint()
                        struct.read(input)
                        return struct
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("Annotation")
        if (this.timestamp !== null && this.timestamp !== undefined) {
            if (true) {
                const timestamp_item = this.timestamp
                output.writeFieldBegin("timestamp", Thrift.Type.I64, 1)
                output.writeI64(timestamp_item)
                output.writeFieldEnd()
            }
        }
        if (this.value !== null && this.value !== undefined) {
            if (this.value !== null) {
                const value_item = this.value
                output.writeFieldBegin("value", Thrift.Type.STRING, 2)
                output.writeString(value_item)
                output.writeFieldEnd()
            }
        }
        if (this.host !== null && this.host !== undefined) {
            if (this.host !== undefined) {
                const host_item = this.host
                output.writeFieldBegin("host", Thrift.Type.STRUCT, 3)
                host_item.write(output)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}