/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 37381b506e4da989e44d86ebf4c7f8eb1e08ca2e
 *   built at: 20170322-170720
 */
/**
 * A trace is a series of spans (often RPC calls) which form a latency tree.
 *
 * The root span is where trace_id = id and parent_id = Nil. The root span is
 * usually the longest interval in the trace, starting with a SERVER_RECV
 * annotation and ending with a SERVER_SEND.
 */


import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {Annotation} from './Annotation'
import {BinaryAnnotation} from './BinaryAnnotation'

export class Span {
    public traceId: number
    public name: string
    public id: number
    public parentId: number
    public annotations: Array<Annotation>
    public binaryAnnotations: Array<BinaryAnnotation>
    public debug: boolean
    constructor(args?) {
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    // reading traceId
                    this.traceId = input.readI64()
                    break
case 3:
                    // reading name
                    this.name = input.readString()
                    break
case 4:
                    // reading id
                    this.id = input.readI64()
                    break
case 5:
                    // reading parentId
                    this.parentId = input.readI64()
                    break
case 6:
                    // reading annotations
                    this.annotations = (() => {
                                        const meta = input.readListBegin()
                                        const elems = new Array<Annotation>()
                                        for (let i = 0; i < meta.size; i++) {
                                            const elem = (() => {
                                        const struct = new Annotation()
                                        struct.read(input)
                                        return struct
                                    })()
                                    
                                            elems.push(elem)
                                        }
                                        input.readListEnd()
                                        return elems
                                    })()
                    break
case 8:
                    // reading binaryAnnotations
                    this.binaryAnnotations = (() => {
                                        const meta = input.readListBegin()
                                        const elems = new Array<BinaryAnnotation>()
                                        for (let i = 0; i < meta.size; i++) {
                                            const elem = (() => {
                                        const struct = new BinaryAnnotation()
                                        struct.read(input)
                                        return struct
                                    })()
                                    
                                            elems.push(elem)
                                        }
                                        input.readListEnd()
                                        return elems
                                    })()
                    break
case 9:
                    // reading debug
                    this.debug = input.readBool()
                    break

                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("Span")
        if (this.traceId !== null && this.traceId !== undefined) {
            // writing traceId
            if (true) {
                const traceId_item = this.traceId
                output.writeFieldBegin("traceId", Thrift.Type.I64, 1)
                output.writeI64(traceId_item)
                output.writeFieldEnd()
            }
        }
        if (this.name !== null && this.name !== undefined) {
            // writing name
            if (this.name !== null) {
                const name_item = this.name
                output.writeFieldBegin("name", Thrift.Type.STRING, 3)
                output.writeString(name_item)
                output.writeFieldEnd()
            }
        }
        if (this.id !== null && this.id !== undefined) {
            // writing id
            if (true) {
                const id_item = this.id
                output.writeFieldBegin("id", Thrift.Type.I64, 4)
                output.writeI64(id_item)
                output.writeFieldEnd()
            }
        }
        if (this.parentId !== null && this.parentId !== undefined) {
            // writing parentId
            if (this.parentId !== undefined) {
                const parentId_item = this.parentId
                output.writeFieldBegin("parentId", Thrift.Type.I64, 5)
                output.writeI64(parentId_item)
                output.writeFieldEnd()
            }
        }
        if (this.annotations !== null && this.annotations !== undefined) {
            // writing annotations
            if (this.annotations !== null) {
                const annotations_item = this.annotations
                output.writeFieldBegin("annotations", Thrift.Type.LIST, 6)
                output.writeListBegin(Thrift.Type.STRUCT, annotations_item.length)
                for (let i = 0; i < annotations_item.length; i++) {
                    const annotations_item_element = annotations_item[i]
                    annotations_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        if (this.binaryAnnotations !== null && this.binaryAnnotations !== undefined) {
            // writing binaryAnnotations
            if (this.binaryAnnotations !== null) {
                const binaryAnnotations_item = this.binaryAnnotations
                output.writeFieldBegin("binaryAnnotations", Thrift.Type.LIST, 8)
                output.writeListBegin(Thrift.Type.STRUCT, binaryAnnotations_item.length)
                for (let i = 0; i < binaryAnnotations_item.length; i++) {
                    const binaryAnnotations_item_element = binaryAnnotations_item[i]
                    binaryAnnotations_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        if (this.debug !== null && this.debug !== undefined) {
            // writing debug
            if (true) {
                const debug_item = this.debug
                output.writeFieldBegin("debug", Thrift.Type.BOOL, 9)
                output.writeBool(debug_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}