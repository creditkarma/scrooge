/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: b5540a5ea44ab683c536210956fb2e7c3497b122
 *   built at: 20170330-131250
 */
/**
 * The Response carries a reply header for tracing. These are
 * empty unless the request is being debugged, in which case a
 * transcript is copied.
 */


import thrift from 'thrift'
import {Thrift, Protocol} from 'thrift'

import {RequestContext} from './RequestContext'
import {Span} from './Span'

export interface IResponseHeaderArgs {
    spans: Array<Span>
    contexts: Array<RequestContext>
}

export class ResponseHeader {
    public spans: Array<Span>
    public contexts: Array<RequestContext>
    constructor(args: IResponseHeaderArgs) {
            if (args.spans != null) {
                this.spans = args.spans
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spans is unset!')
            }
            if (args.contexts != null) {
                this.contexts = args.contexts
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contexts is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.spans = (() => {
                        const meta = input.readListBegin()
                        const elems = new Array<Span>()
                        for (let i = 0; i < meta.size; i++) {
                            const elem = (() => {
                        const struct = new Span()
                        struct.read(input)
                        return struct
                    })()
                    
                            elems.push(elem)
                        }
                        input.readListEnd()
                        return elems
                    })()
                    break
                case 2:
                    this.contexts = (() => {
                        const meta = input.readListBegin()
                        const elems = new Array<RequestContext>()
                        for (let i = 0; i < meta.size; i++) {
                            const elem = (() => {
                        const struct = new RequestContext()
                        struct.read(input)
                        return struct
                    })()
                    
                            elems.push(elem)
                        }
                        input.readListEnd()
                        return elems
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("ResponseHeader")
        if (this.spans != null) {
            if (this.spans !== null) {
                const spans_item = this.spans
                output.writeFieldBegin("spans", Thrift.Type.LIST, 1)
                output.writeListBegin(Thrift.Type.STRUCT, spans_item.length)
                for (let i = 0; i < spans_item.length; i++) {
                    const spans_item_element = spans_item[i]
                    spans_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        if (this.contexts != null) {
            if (this.contexts !== null) {
                const contexts_item = this.contexts
                output.writeFieldBegin("contexts", Thrift.Type.LIST, 2)
                output.writeListBegin(Thrift.Type.STRUCT, contexts_item.length)
                for (let i = 0; i < contexts_item.length; i++) {
                    const contexts_item_element = contexts_item[i]
                    contexts_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}