/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: eb527853cd68a47db6989d5d8ad99cf9fd1e2a1b
 *   built at: 20170322-114513
 */
/**
 * Indicates the network context of a service recording an annotation with two
 * exceptions.
 *
 * When a BinaryAnnotation, and key is CLIENT_ADDR or SERVER_ADDR,
 * the endpoint indicates the source or destination of an RPC. This exception
 * allows zipkin to display network context of uninstrumented services, or
 * clients such as web browsers.
 */


import thrift from 'thrift'
import {Q, Thrift} from 'thrift'



export class Endpoint {
    public ipv4: number
    public port: number
    public serviceName: string
    constructor(args?) {
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            input.skip(ftype)
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("Endpoint")
        if (this.ipv4 !== null && this.ipv4 !== undefined) {
            // writing ipv4
            if (true) {
                const ipv4_item = this.ipv4
                output.writeFieldBegin("ipv4", Thrift.Type.I32, 1)
                // isList: false, isSet: false, isMap: false, isStruct: false, isEnum: false, isBase: ?
                output.writeI32(ipv4_item)
                output.writeFieldEnd()
            }
        }
        if (this.port !== null && this.port !== undefined) {
            // writing port
            if (true) {
                const port_item = this.port
                output.writeFieldBegin("port", Thrift.Type.I16, 2)
                // isList: false, isSet: false, isMap: false, isStruct: false, isEnum: false, isBase: ?
                output.writeI16(port_item)
                output.writeFieldEnd()
            }
        }
        if (this.serviceName !== null && this.serviceName !== undefined) {
            // writing serviceName
            if (this.serviceName !== null) {
                const serviceName_item = this.serviceName
                output.writeFieldBegin("serviceName", Thrift.Type.STRING, 3)
                // isList: false, isSet: false, isMap: false, isStruct: false, isEnum: false, isBase: ?
                output.writeString(serviceName_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}