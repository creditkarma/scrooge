/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 382b53bc01abc74e0182f0c8e1ece5cc55c11355
 *   built at: 20170307-134409
 */

// Import this file with:
// import { TalonResponseException } from 'com.creditkarma.talon.finagle.exception.thrift'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {TalonResponse} from './TalonResponse'

export class TalonResponseException {
    public success: boolean
    public response: TalonResponse
    public message: string
    
    constructor(args?) {
        if (args) {
            if (args.response !== undefined && args.response !== null) {
                this.response = args.response
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field response is unset!')
            }
            if (args.message !== undefined && args.message !== null) {
                this.message = args.message
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!')
            }
            
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const ret = input.readFieldBegin()
            const fname = ret.fname
            const ftype = ret.ftype
            const fid = ret.fid
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.response = new TalonResponse()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 2:
                                        if (ftype === Thrift.Type.String) {
                        this.message = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                
                default:
                    input.skip(ftype)
            }
            
            
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("TalonResponseException")
        if (this.response !== null && this.response !== undefined) {
        
                    output.writeFieldBegin("response", Thrift.Type.STRUCT, 1)
            this.response.write(output)
        
        output.writeFieldEnd()
        }
        if (this.message !== null && this.message !== undefined) {
                    output.writeFieldBegin("message", Thrift.Type.String, 2)
            output.writeString(this.message)
        
        
        output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}