/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 382b53bc01abc74e0182f0c8e1ece5cc55c11355
 *   built at: 20170307-134415
 */
/**
 * Indicates the network context of a service recording an annotation with two
 * exceptions.
 *
 * When a BinaryAnnotation, and key is CLIENT_ADDR or SERVER_ADDR,
 * the endpoint indicates the source or destination of an RPC. This exception
 * allows zipkin to display network context of uninstrumented services, or
 * clients such as web browsers.
 */

// Import this file with:
// import { Endpoint } from 'thrift'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'



export class Endpoint {
    public success: boolean
    public ipv4: number
    public port: number
    public serviceName: string
    
    constructor(args?) {
        if (args) {
            if (args.ipv4 !== undefined && args.ipv4 !== null) {
                this.ipv4 = args.ipv4
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ipv4 is unset!')
            }
            if (args.port !== undefined && args.port !== null) {
                this.port = args.port
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!')
            }
            if (args.serviceName !== undefined && args.serviceName !== null) {
                this.serviceName = args.serviceName
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serviceName is unset!')
            }
            
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const ret = input.readFieldBegin()
            const fname = ret.fname
            const ftype = ret.ftype
            const fid = ret.fid
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                                        if (ftype === Thrift.Type.Number) {
                        this.ipv4 = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 2:
                                        if (ftype === Thrift.Type.Number) {
                        this.port = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 3:
                                        if (ftype === Thrift.Type.String) {
                        this.serviceName = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                
                default:
                    input.skip(ftype)
            }
            
            
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("Endpoint")
        if (this.ipv4 !== null && this.ipv4 !== undefined) {
                    output.writeFieldBegin("ipv4", Thrift.Type.Number, 1)
            output.writeNumber(this.ipv4)
        
        
        output.writeFieldEnd()
        }
        if (this.port !== null && this.port !== undefined) {
                    output.writeFieldBegin("port", Thrift.Type.Number, 2)
            output.writeNumber(this.port)
        
        
        output.writeFieldEnd()
        }
        if (this.serviceName !== null && this.serviceName !== undefined) {
                    output.writeFieldBegin("serviceName", Thrift.Type.String, 3)
            output.writeString(this.serviceName)
        
        
        output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}