/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 382b53bc01abc74e0182f0c8e1ece5cc55c11355
 *   built at: 20170307-134415
 */
/**
 * The Response carries a reply header for tracing. These are
 * empty unless the request is being debugged, in which case a
 * transcript is copied.
 */

// Import this file with:
// import { ResponseHeader } from 'thrift'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {RequestContext} from './RequestContext'
import {Span} from './Span'

export class ResponseHeader {
    public success: boolean
    public spans: Array<Span>
    public contexts: Array<RequestContext>
    
    constructor(args?) {
        if (args) {
            if (args.spans !== undefined && args.spans !== null) {
                this.spans = args.spans
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spans is unset!')
            }
            if (args.contexts !== undefined && args.contexts !== null) {
                this.contexts = args.contexts
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contexts is unset!')
            }
            
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const ret = input.readFieldBegin()
            const fname = ret.fname
            const ftype = ret.ftype
            const fid = ret.fid
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.spans = new Array<Span>()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 2:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.contexts = new Array<RequestContext>()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                
                default:
                    input.skip(ftype)
            }
            
            
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("ResponseHeader")
        if (this.spans !== null && this.spans !== undefined) {
        
                    output.writeFieldBegin("spans", Thrift.Type.STRUCT, 1)
            this.spans.write(output)
        
        output.writeFieldEnd()
        }
        if (this.contexts !== null && this.contexts !== undefined) {
        
                    output.writeFieldBegin("contexts", Thrift.Type.STRUCT, 2)
            this.contexts.write(output)
        
        output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}