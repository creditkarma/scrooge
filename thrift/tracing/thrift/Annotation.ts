/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 382b53bc01abc74e0182f0c8e1ece5cc55c11355
 *   built at: 20170307-134415
 */
/**
 * An annotation is similar to a log statement. It includes a host field which
 * allows these events to be attributed properly, and also aggregatable.
 */

// Import this file with:
// import { Annotation } from 'thrift'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {Endpoint} from './Endpoint'

export class Annotation {
    public success: boolean
    public timestamp: number
    public value: string
    public host: Endpoint
    
    constructor(args?) {
        if (args) {
            if (args.timestamp !== undefined && args.timestamp !== null) {
                this.timestamp = args.timestamp
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!')
            }
            if (args.value !== undefined && args.value !== null) {
                this.value = args.value
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!')
            }
            if (args.host !== undefined && args.host !== null) {
                this.host = args.host
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field host is unset!')
            }
            
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const ret = input.readFieldBegin()
            const fname = ret.fname
            const ftype = ret.ftype
            const fid = ret.fid
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                                        if (ftype === Thrift.Type.Number) {
                        this.timestamp = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 2:
                                        if (ftype === Thrift.Type.String) {
                        this.value = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 3:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.host = new Endpoint()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                
                default:
                    input.skip(ftype)
            }
            
            
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("Annotation")
        if (this.timestamp !== null && this.timestamp !== undefined) {
                    output.writeFieldBegin("timestamp", Thrift.Type.Number, 1)
            output.writeNumber(this.timestamp)
        
        
        output.writeFieldEnd()
        }
        if (this.value !== null && this.value !== undefined) {
                    output.writeFieldBegin("value", Thrift.Type.String, 2)
            output.writeString(this.value)
        
        
        output.writeFieldEnd()
        }
        if (this.host !== null && this.host !== undefined) {
        
                    output.writeFieldBegin("host", Thrift.Type.STRUCT, 3)
            this.host.write(output)
        
        output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}