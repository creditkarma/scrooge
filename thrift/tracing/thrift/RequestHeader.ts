/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 382b53bc01abc74e0182f0c8e1ece5cc55c11355
 *   built at: 20170307-134415
 */
/**
 * The following are for finagle-thrift specific tracing headers &
 * negotiation.
 */
/**
 * RequestHeader defines headers for the request. These carry the span data, and
 * a flag indicating whether the request is to be debugged.
 */

// Import this file with:
// import { RequestHeader } from 'thrift'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {ClientId} from './ClientId'
import {Delegation} from './Delegation'
import {RequestContext} from './RequestContext'

export class RequestHeader {
    public success: boolean
    public traceId: number
    public spanId: number
    public parentSpanId: number
    public sampled: boolean
    public clientId: ClientId
    public flags: number
    public contexts: Array<RequestContext>
    public dest: string
    public delegations: Array<Delegation>
    
    constructor(args?) {
        if (args) {
            if (args.traceId !== undefined && args.traceId !== null) {
                this.traceId = args.traceId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceId is unset!')
            }
            if (args.spanId !== undefined && args.spanId !== null) {
                this.spanId = args.spanId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spanId is unset!')
            }
            if (args.parentSpanId !== undefined && args.parentSpanId !== null) {
                this.parentSpanId = args.parentSpanId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parentSpanId is unset!')
            }
            if (args.sampled !== undefined && args.sampled !== null) {
                this.sampled = args.sampled
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sampled is unset!')
            }
            if (args.clientId !== undefined && args.clientId !== null) {
                this.clientId = args.clientId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field clientId is unset!')
            }
            if (args.flags !== undefined && args.flags !== null) {
                this.flags = args.flags
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flags is unset!')
            }
            if (args.contexts !== undefined && args.contexts !== null) {
                this.contexts = args.contexts
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contexts is unset!')
            }
            if (args.dest !== undefined && args.dest !== null) {
                this.dest = args.dest
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dest is unset!')
            }
            if (args.delegations !== undefined && args.delegations !== null) {
                this.delegations = args.delegations
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delegations is unset!')
            }
            
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const ret = input.readFieldBegin()
            const fname = ret.fname
            const ftype = ret.ftype
            const fid = ret.fid
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                                        if (ftype === Thrift.Type.Number) {
                        this.traceId = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 2:
                                        if (ftype === Thrift.Type.Number) {
                        this.spanId = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 3:
                                        if (ftype === Thrift.Type.Number) {
                        this.parentSpanId = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 5:
                                        if (ftype === Thrift.Type.Boolean) {
                        this.sampled = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 6:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.clientId = new ClientId()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 7:
                                        if (ftype === Thrift.Type.Number) {
                        this.flags = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 8:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.contexts = new Array<RequestContext>()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 9:
                                        if (ftype === Thrift.Type.String) {
                        this.dest = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 10:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.delegations = new Array<Delegation>()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                
                default:
                    input.skip(ftype)
            }
            
            
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("RequestHeader")
        if (this.traceId !== null && this.traceId !== undefined) {
                    output.writeFieldBegin("traceId", Thrift.Type.Number, 1)
            output.writeNumber(this.traceId)
        
        
        output.writeFieldEnd()
        }
        if (this.spanId !== null && this.spanId !== undefined) {
                    output.writeFieldBegin("spanId", Thrift.Type.Number, 2)
            output.writeNumber(this.spanId)
        
        
        output.writeFieldEnd()
        }
        if (this.parentSpanId !== null && this.parentSpanId !== undefined) {
                    output.writeFieldBegin("parentSpanId", Thrift.Type.Number, 3)
            output.writeNumber(this.parentSpanId)
        
        
        output.writeFieldEnd()
        }
        if (this.sampled !== null && this.sampled !== undefined) {
                    output.writeFieldBegin("sampled", Thrift.Type.Boolean, 5)
            output.writeBoolean(this.sampled)
        
        
        output.writeFieldEnd()
        }
        if (this.clientId !== null && this.clientId !== undefined) {
        
                    output.writeFieldBegin("clientId", Thrift.Type.STRUCT, 6)
            this.clientId.write(output)
        
        output.writeFieldEnd()
        }
        if (this.flags !== null && this.flags !== undefined) {
                    output.writeFieldBegin("flags", Thrift.Type.Number, 7)
            output.writeNumber(this.flags)
        
        
        output.writeFieldEnd()
        }
        if (this.contexts !== null && this.contexts !== undefined) {
        
                    output.writeFieldBegin("contexts", Thrift.Type.STRUCT, 8)
            this.contexts.write(output)
        
        output.writeFieldEnd()
        }
        if (this.dest !== null && this.dest !== undefined) {
                    output.writeFieldBegin("dest", Thrift.Type.String, 9)
            output.writeString(this.dest)
        
        
        output.writeFieldEnd()
        }
        if (this.delegations !== null && this.delegations !== undefined) {
        
                    output.writeFieldBegin("delegations", Thrift.Type.STRUCT, 10)
            this.delegations.write(output)
        
        output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}