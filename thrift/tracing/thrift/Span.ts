/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 382b53bc01abc74e0182f0c8e1ece5cc55c11355
 *   built at: 20170307-134415
 */
/**
 * A trace is a series of spans (often RPC calls) which form a latency tree.
 *
 * The root span is where trace_id = id and parent_id = Nil. The root span is
 * usually the longest interval in the trace, starting with a SERVER_RECV
 * annotation and ending with a SERVER_SEND.
 */

// Import this file with:
// import { Span } from 'thrift'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {Annotation} from './Annotation'
import {BinaryAnnotation} from './BinaryAnnotation'

export class Span {
    public success: boolean
    public traceId: number
    public name: string
    public id: number
    public parentId: number
    public annotations: Array<Annotation>
    public binaryAnnotations: Array<BinaryAnnotation>
    public debug: boolean
    
    constructor(args?) {
        if (args) {
            if (args.traceId !== undefined && args.traceId !== null) {
                this.traceId = args.traceId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceId is unset!')
            }
            if (args.name !== undefined && args.name !== null) {
                this.name = args.name
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!')
            }
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!')
            }
            if (args.parentId !== undefined && args.parentId !== null) {
                this.parentId = args.parentId
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parentId is unset!')
            }
            if (args.annotations !== undefined && args.annotations !== null) {
                this.annotations = args.annotations
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field annotations is unset!')
            }
            if (args.binaryAnnotations !== undefined && args.binaryAnnotations !== null) {
                this.binaryAnnotations = args.binaryAnnotations
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field binaryAnnotations is unset!')
            }
            if (args.debug !== undefined && args.debug !== null) {
                this.debug = args.debug
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field debug is unset!')
            }
            
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const ret = input.readFieldBegin()
            const fname = ret.fname
            const ftype = ret.ftype
            const fid = ret.fid
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                                        if (ftype === Thrift.Type.Number) {
                        this.traceId = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 3:
                                        if (ftype === Thrift.Type.String) {
                        this.name = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 4:
                                        if (ftype === Thrift.Type.Number) {
                        this.id = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 5:
                                        if (ftype === Thrift.Type.Number) {
                        this.parentId = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 6:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.annotations = new Array<Annotation>()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 8:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.binaryAnnotations = new Array<BinaryAnnotation>()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 9:
                                        if (ftype === Thrift.Type.Boolean) {
                        this.debug = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                
                default:
                    input.skip(ftype)
            }
            
            
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("Span")
        if (this.traceId !== null && this.traceId !== undefined) {
                    output.writeFieldBegin("traceId", Thrift.Type.Number, 1)
            output.writeNumber(this.traceId)
        
        
        output.writeFieldEnd()
        }
        if (this.name !== null && this.name !== undefined) {
                    output.writeFieldBegin("name", Thrift.Type.String, 3)
            output.writeString(this.name)
        
        
        output.writeFieldEnd()
        }
        if (this.id !== null && this.id !== undefined) {
                    output.writeFieldBegin("id", Thrift.Type.Number, 4)
            output.writeNumber(this.id)
        
        
        output.writeFieldEnd()
        }
        if (this.parentId !== null && this.parentId !== undefined) {
                    output.writeFieldBegin("parentId", Thrift.Type.Number, 5)
            output.writeNumber(this.parentId)
        
        
        output.writeFieldEnd()
        }
        if (this.annotations !== null && this.annotations !== undefined) {
        
                    output.writeFieldBegin("annotations", Thrift.Type.STRUCT, 6)
            this.annotations.write(output)
        
        output.writeFieldEnd()
        }
        if (this.binaryAnnotations !== null && this.binaryAnnotations !== undefined) {
        
                    output.writeFieldBegin("binaryAnnotations", Thrift.Type.STRUCT, 8)
            this.binaryAnnotations.write(output)
        
        output.writeFieldEnd()
        }
        if (this.debug !== null && this.debug !== undefined) {
                    output.writeFieldBegin("debug", Thrift.Type.Boolean, 9)
            output.writeBoolean(this.debug)
        
        
        output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}