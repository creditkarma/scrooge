/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 382b53bc01abc74e0182f0c8e1ece5cc55c11355
 *   built at: 20170307-134415
 */
/**
 * Binary annotations are tags applied to a Span to give it context. For
 * example, a binary annotation of "http.uri" could the path to a resource in a
 * RPC call.
 *
 * Binary annotations of type STRING are always queryable, though more a
 * historical implementation detail than a structural concern.
 *
 * Binary annotations can repeat, and vary on the host. Similar to Annotation,
 * the host indicates who logged the event. This allows you to tell the
 * difference between the client and server side of the same key. For example,
 * the key "http.uri" might be different on the client and server side due to
 * rewriting, like "/api/v1/myresource" vs "/myresource. Via the host field,
 * you can see the different points of view, which often help in debugging.
 */

// Import this file with:
// import { BinaryAnnotation } from 'thrift'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {AnnotationType} from './AnnotationType'
import {Endpoint} from './Endpoint'

export class BinaryAnnotation {
    public success: boolean
    public key: string
    public value: Buffer
    public annotationType: thrift.AnnotationType
    public host: Endpoint
    
    constructor(args?) {
        if (args) {
            if (args.key !== undefined && args.key !== null) {
                this.key = args.key
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!')
            }
            if (args.value !== undefined && args.value !== null) {
                this.value = args.value
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!')
            }
            if (args.annotationType !== undefined && args.annotationType !== null) {
                this.annotationType = args.annotationType
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field annotationType is unset!')
            }
            if (args.host !== undefined && args.host !== null) {
                this.host = args.host
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field host is unset!')
            }
            
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const ret = input.readFieldBegin()
            const fname = ret.fname
            const ftype = ret.ftype
            const fid = ret.fid
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                                        if (ftype === Thrift.Type.String) {
                        this.key = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 2:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.value = new Buffer()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 3:
                                        if (ftype === Thrift.Type.Thrift.AnnotationType) {
                        this.annotationType = input.read()
                    
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                case 4:
                    
                                        if (ftype === Thrift.Type.STRUCT) {
                        this.host = new Endpoint()
                    
                    } else {
                        input.skip(ftype)
                    }
                    break
                
                default:
                    input.skip(ftype)
            }
            
            
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("BinaryAnnotation")
        if (this.key !== null && this.key !== undefined) {
                    output.writeFieldBegin("key", Thrift.Type.String, 1)
            output.writeString(this.key)
        
        
        output.writeFieldEnd()
        }
        if (this.value !== null && this.value !== undefined) {
        
                    output.writeFieldBegin("value", Thrift.Type.STRUCT, 2)
            this.value.write(output)
        
        output.writeFieldEnd()
        }
        if (this.annotationType !== null && this.annotationType !== undefined) {
                    output.writeFieldBegin("annotationType", Thrift.Type.Thrift.AnnotationType, 3)
            output.writeThrift.AnnotationType(this.annotationType)
        
        
        output.writeFieldEnd()
        }
        if (this.host !== null && this.host !== undefined) {
        
                    output.writeFieldBegin("host", Thrift.Type.STRUCT, 4)
            this.host.write(output)
        
        output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}