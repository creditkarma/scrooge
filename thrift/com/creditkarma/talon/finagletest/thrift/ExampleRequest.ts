/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 952e3625feae4a1a9eeaf4a75d413531b1770809
 *   built at: 20170404-132053
 */


import thrift from 'thrift'
import {Thrift, Protocol, Int64} from 'thrift'



export interface IExampleRequestArgs {
    something: number
}

export class ExampleRequest {
    public something: number
    // If possible, populate this with .populate method instead so that
    // we can ensure the struct is constructed correctly
constructor(args?: IExampleRequestArgs) {
        if (args) {
            if (args.something != null) {
                this.something = args.something
            }
        }
    }
    populate(args: IExampleRequestArgs) {
            if (args.something != null) {
                this.something = args.something
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field something is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
    const {ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.something = input.readI32()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("ExampleRequest")
        if (this.something != null) {
            if (true) {
                const something_item = this.something
                output.writeFieldBegin("something", Thrift.Type.I32, 1)
                output.writeI32(something_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}