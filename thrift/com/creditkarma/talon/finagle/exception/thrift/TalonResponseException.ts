/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 5b0cb3ee0c7699372f2c21cf043ce2b0e7892346
 *   built at: 20170323-104603
 */


import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

import {TalonResponse} from './TalonResponse'

export class TalonResponseException {
    public response: TalonResponse
    public message: string
    constructor(args?) {
        if (args) {
            if (args.response !== undefined && args.response !== null) {
                this.response = args.response
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field response is unset!')
            }
            if (args.message !== undefined && args.message !== null) {
                this.message = args.message
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!')
            }
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.response = (() => {
                        const struct = new TalonResponse()
                        struct.read(input)
                        return struct
                    })()
                    break
                case 2:
                    this.message = input.readString()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("TalonResponseException")
        if (this.response !== null && this.response !== undefined) {
            if (this.response !== null) {
                const response_item = this.response
                output.writeFieldBegin("response", Thrift.Type.STRUCT, 1)
                response_item.write(output)
                output.writeFieldEnd()
            }
        }
        if (this.message !== null && this.message !== undefined) {
            if (this.message !== null) {
                const message_item = this.message
                output.writeFieldBegin("message", Thrift.Type.STRING, 2)
                output.writeString(message_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}