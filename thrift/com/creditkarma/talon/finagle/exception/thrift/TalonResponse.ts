/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 952e3625feae4a1a9eeaf4a75d413531b1770809
 *   built at: 20170404-132101
 */


import thrift from 'thrift'
import {Thrift} from 'thrift'

import {AuthResult} from './AuthResult'

export class TalonResponse {
    public authorization: AuthResult
    constructor(args?) {
        if (args) {
            if (args.authorization !== undefined && args.authorization !== null) {
                this.authorization = args.authorization
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field authorization is unset!')
            }
        }
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 0:
                    this.authorization = input.readI32()
                    break
                
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("TalonResponse")
                if (this.authorization !== null && this.authorization !== undefined) {
            if (this.authorization !== null) {
                        const authorization_item = this.authorization
                        output.writeFieldBegin("authorization", Thrift.Type.I32, 1)
                        output.writeI32(authorization_item)
                        output.writeFieldEnd()
                    }
            output.writeFieldEnd()
        }
        
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}