/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: b5540a5ea44ab683c536210956fb2e7c3497b122
 *   built at: 20170330-131242
 */
import thrift from 'thrift'
import {Thrift, Protocol} from 'thrift'

import { TodoException } from './TodoException'
import { Todo } from './Todo'
import { CreateRequestContext } from './CreateRequestContext'

/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */


export class TodoServiceAllArgs {
    constructor(args?: {}) {
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            input.skip(ftype)
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceAllArgs")
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceAllResultArgs {
    success: Array<Todo>
}

export class TodoServiceAllResult {
    public success: Array<Todo>
    constructor(args: ITodoServiceAllResultArgs) {
            if (args.success != null) {
                this.success = args.success
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 0:
                    this.success = (() => {
                        const meta = input.readListBegin()
                        const elems = new Array<Todo>()
                        for (let i = 0; i < meta.size; i++) {
                            const elem = (() => {
                        const struct = new Todo()
                        struct.read(input)
                        return struct
                    })()
                    
                            elems.push(elem)
                        }
                        input.readListEnd()
                        return elems
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceAllResult")
        if (this.success != null) {
            if (this.success !== null) {
                const success_item = this.success
                output.writeFieldBegin("success", Thrift.Type.LIST, 0)
                output.writeListBegin(Thrift.Type.STRUCT, success_item.length)
                for (let i = 0; i < success_item.length; i++) {
                    const success_item_element = success_item[i]
                    success_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceFindByNameArgsArgs {
    name: string
}

export class TodoServiceFindByNameArgs {
    public name: string
    constructor(args: ITodoServiceFindByNameArgsArgs) {
            if (args.name != null) {
                this.name = args.name
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.name = input.readString()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceFindByNameArgs")
        if (this.name != null) {
            if (this.name !== null) {
                const name_item = this.name
                output.writeFieldBegin("name", Thrift.Type.STRING, 1)
                output.writeString(name_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceFindByNameResultArgs {
    success: Array<Todo>
}

export class TodoServiceFindByNameResult {
    public success: Array<Todo>
    constructor(args: ITodoServiceFindByNameResultArgs) {
            if (args.success != null) {
                this.success = args.success
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 0:
                    this.success = (() => {
                        const meta = input.readListBegin()
                        const elems = new Array<Todo>()
                        for (let i = 0; i < meta.size; i++) {
                            const elem = (() => {
                        const struct = new Todo()
                        struct.read(input)
                        return struct
                    })()
                    
                            elems.push(elem)
                        }
                        input.readListEnd()
                        return elems
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceFindByNameResult")
        if (this.success != null) {
            if (this.success !== null) {
                const success_item = this.success
                output.writeFieldBegin("success", Thrift.Type.LIST, 0)
                output.writeListBegin(Thrift.Type.STRUCT, success_item.length)
                for (let i = 0; i < success_item.length; i++) {
                    const success_item_element = success_item[i]
                    success_item_element.write(output)
                }
                output.writeListEnd()
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceFindByIdArgsArgs {
    id: number
}

export class TodoServiceFindByIdArgs {
    public id: number
    constructor(args: ITodoServiceFindByIdArgsArgs) {
            if (args.id != null) {
                this.id = args.id
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.id = input.readI64()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceFindByIdArgs")
        if (this.id != null) {
            if (true) {
                const id_item = this.id
                output.writeFieldBegin("id", Thrift.Type.I64, 1)
                output.writeI64(id_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceFindByIdResultArgs {
    ex: TodoException
    success: Todo
}

export class TodoServiceFindByIdResult {
    public ex: TodoException
    public success: Todo
    constructor(args: ITodoServiceFindByIdResultArgs) {
            if (args.ex != null) {
                this.ex = args.ex
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ex is unset!')
            }
            if (args.success != null) {
                this.success = args.success
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.ex = (() => {
                        const struct = new TodoException()
                        struct.read(input)
                        return struct
                    })()
                    break
                case 0:
                    this.success = (() => {
                        const struct = new Todo()
                        struct.read(input)
                        return struct
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceFindByIdResult")
        if (this.ex != null) {
            if (this.ex !== null) {
                const ex_item = this.ex
                output.writeFieldBegin("ex", Thrift.Type.STRUCT, 1)
                ex_item.write(output)
                output.writeFieldEnd()
            }
        }
        if (this.success != null) {
            if (this.success !== null) {
                const success_item = this.success
                output.writeFieldBegin("success", Thrift.Type.STRUCT, 0)
                success_item.write(output)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceCreateArgsArgs {
    requestContext: CreateRequestContext
}

export class TodoServiceCreateArgs {
    public requestContext: CreateRequestContext
    constructor(args: ITodoServiceCreateArgsArgs) {
            if (args.requestContext != null) {
                this.requestContext = args.requestContext
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field requestContext is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.requestContext = (() => {
                        const struct = new CreateRequestContext()
                        struct.read(input)
                        return struct
                    })()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceCreateArgs")
        if (this.requestContext != null) {
            if (this.requestContext !== null) {
                const requestContext_item = this.requestContext
                output.writeFieldBegin("requestContext", Thrift.Type.STRUCT, 1)
                requestContext_item.write(output)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceCreateResultArgs {
    success: number
}

export class TodoServiceCreateResult {
    public success: number
    constructor(args: ITodoServiceCreateResultArgs) {
            if (args.success != null) {
                this.success = args.success
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 0:
                    this.success = input.readI64()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceCreateResult")
        if (this.success != null) {
            if (true) {
                const success_item = this.success
                output.writeFieldBegin("success", Thrift.Type.I64, 0)
                output.writeI64(success_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceCompleteArgsArgs {
    id: number
}

export class TodoServiceCompleteArgs {
    public id: number
    constructor(args: ITodoServiceCompleteArgsArgs) {
            if (args.id != null) {
                this.id = args.id
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.id = input.readI64()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceCompleteArgs")
        if (this.id != null) {
            if (true) {
                const id_item = this.id
                output.writeFieldBegin("id", Thrift.Type.I64, 1)
                output.writeI64(id_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceCompleteResultArgs {
    success: boolean
}

export class TodoServiceCompleteResult {
    public success: boolean
    constructor(args: ITodoServiceCompleteResultArgs) {
            if (args.success != null) {
                this.success = args.success
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 0:
                    this.success = input.readBool()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceCompleteResult")
        if (this.success != null) {
            if (true) {
                const success_item = this.success
                output.writeFieldBegin("success", Thrift.Type.BOOL, 0)
                output.writeBool(success_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceRemoveArgsArgs {
    id: number
}

export class TodoServiceRemoveArgs {
    public id: number
    constructor(args: ITodoServiceRemoveArgsArgs) {
            if (args.id != null) {
                this.id = args.id
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    this.id = input.readI64()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceRemoveArgs")
        if (this.id != null) {
            if (true) {
                const id_item = this.id
                output.writeFieldBegin("id", Thrift.Type.I64, 1)
                output.writeI64(id_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}/**
 * A simple task service that allows a client to create,
 * complete, and view tasks.
 * You should replace this with your actual service.
 */

export interface ITodoServiceRemoveResultArgs {
    success: boolean
}

export class TodoServiceRemoveResult {
    public success: boolean
    constructor(args: ITodoServiceRemoveResultArgs) {
            if (args.success != null) {
                this.success = args.success
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!')
            }
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 0:
                    this.success = input.readBool()
                    break
                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("TodoServiceRemoveResult")
        if (this.success != null) {
            if (true) {
                const success_item = this.success
                output.writeFieldBegin("success", Thrift.Type.BOOL, 0)
                output.writeBool(success_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}
export class Client {
    private _seqid: number
    public _reqs: {[key: string]: (e: Error, r: any) => void}

    constructor(public output: Protocol, public pClass: Protocol) {
        this._seqid = 0
        this._reqs = {}
    }

    public seqid(): number {
        return this._seqid
    }

    public new_seqid(): number {
        return this._seqid += 1
    }

    public all(callback: (e: Error, r: Array<Todo>) => void): void
    public all(): Promise<Array<Todo>>
    public all(callback?: (e: Error, r: Array<Todo>) => void): Promise<Array<Todo>>|void {
        this._seqid = this.new_seqid(V)
        if (callback instanceof Function) {
            return new Promise((resolve, reject) => {
                this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                        reject(error)
                    } else {
                        resolve(result)
                    }
                }
                this.send_all()
            })
        } else {
            this._reqs[this.seqid()] = callback
            this.send_all()
        }
    }

    public send_all(): void {
        const output = new this.pClass(this.output)
        output.writeMessageBegin("all", Thrift.MessageType.CALL, this.seqid())
        const args = new TodoServiceAllArgs({  })
        args.write(output)
        output.writeMessageEnd()
        return this.output.flush()
    }

    public recv_all(input: Protocol, mtype: Thrift.MessageType, rseqid: number): void {
        const noop = () => null
        let callback = this._reqs[rseqid] || noop
        delete this._reqs[rseqid]
        if (mtype === Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException()
            x.read(input)
            input.readMessageEnd()
            return callback(x)
        }
        const result = new TodoServiceAllResult()
        result.read(input)
        input.readMessageEnd()

        if (result.ex != null) {
            return callback(result.ex)
        }
        if (result.success != null) {
            return callback(null, result.success)
        }
        return callback("all failed: unknown result")
    }
        public findByName(name: string, callback: (e: Error, r: Array<Todo>) => void): void
    public findByName(name: string, ): Promise<Array<Todo>>
    public findByName(name: string, callback?: (e: Error, r: Array<Todo>) => void): Promise<Array<Todo>>|void {
        this._seqid = this.new_seqid(V)
        if (callback instanceof Function) {
            return new Promise((resolve, reject) => {
                this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                        reject(error)
                    } else {
                        resolve(result)
                    }
                }
                this.send_findByName(name, )
            })
        } else {
            this._reqs[this.seqid()] = callback
            this.send_findByName(name )
        }
    }

    public send_findByName(name: string, ): void {
        const output = new this.pClass(this.output)
        output.writeMessageBegin("findByName", Thrift.MessageType.CALL, this.seqid())
        const args = new TodoServiceFindByNameArgs({ name,  })
        args.write(output)
        output.writeMessageEnd()
        return this.output.flush()
    }

    public recv_findByName(input: Protocol, mtype: Thrift.MessageType, rseqid: number): void {
        const noop = () => null
        let callback = this._reqs[rseqid] || noop
        delete this._reqs[rseqid]
        if (mtype === Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException()
            x.read(input)
            input.readMessageEnd()
            return callback(x)
        }
        const result = new TodoServiceFindByNameResult()
        result.read(input)
        input.readMessageEnd()

        if (result.ex != null) {
            return callback(result.ex)
        }
        if (result.success != null) {
            return callback(null, result.success)
        }
        return callback("findByName failed: unknown result")
    }
        public findById(id: number, callback: (e: Error, r: Todo) => void): void
    public findById(id: number, ): Promise<Todo>
    public findById(id: number, callback?: (e: Error, r: Todo) => void): Promise<Todo>|void {
        this._seqid = this.new_seqid(V)
        if (callback instanceof Function) {
            return new Promise((resolve, reject) => {
                this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                        reject(error)
                    } else {
                        resolve(result)
                    }
                }
                this.send_findById(id, )
            })
        } else {
            this._reqs[this.seqid()] = callback
            this.send_findById(id )
        }
    }

    public send_findById(id: number, ): void {
        const output = new this.pClass(this.output)
        output.writeMessageBegin("findById", Thrift.MessageType.CALL, this.seqid())
        const args = new TodoServiceFindByIdArgs({ id,  })
        args.write(output)
        output.writeMessageEnd()
        return this.output.flush()
    }

    public recv_findById(input: Protocol, mtype: Thrift.MessageType, rseqid: number): void {
        const noop = () => null
        let callback = this._reqs[rseqid] || noop
        delete this._reqs[rseqid]
        if (mtype === Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException()
            x.read(input)
            input.readMessageEnd()
            return callback(x)
        }
        const result = new TodoServiceFindByIdResult()
        result.read(input)
        input.readMessageEnd()

        if (result.ex != null) {
            return callback(result.ex)
        }
        if (result.success != null) {
            return callback(null, result.success)
        }
        return callback("findById failed: unknown result")
    }
        public create(requestContext: CreateRequestContext, callback: (e: Error, r: number) => void): void
    public create(requestContext: CreateRequestContext, ): Promise<number>
    public create(requestContext: CreateRequestContext, callback?: (e: Error, r: number) => void): Promise<number>|void {
        this._seqid = this.new_seqid(V)
        if (callback instanceof Function) {
            return new Promise((resolve, reject) => {
                this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                        reject(error)
                    } else {
                        resolve(result)
                    }
                }
                this.send_create(requestContext, )
            })
        } else {
            this._reqs[this.seqid()] = callback
            this.send_create(requestContext )
        }
    }

    public send_create(requestContext: CreateRequestContext, ): void {
        const output = new this.pClass(this.output)
        output.writeMessageBegin("create", Thrift.MessageType.CALL, this.seqid())
        const args = new TodoServiceCreateArgs({ requestContext,  })
        args.write(output)
        output.writeMessageEnd()
        return this.output.flush()
    }

    public recv_create(input: Protocol, mtype: Thrift.MessageType, rseqid: number): void {
        const noop = () => null
        let callback = this._reqs[rseqid] || noop
        delete this._reqs[rseqid]
        if (mtype === Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException()
            x.read(input)
            input.readMessageEnd()
            return callback(x)
        }
        const result = new TodoServiceCreateResult()
        result.read(input)
        input.readMessageEnd()

        if (result.ex != null) {
            return callback(result.ex)
        }
        if (result.success != null) {
            return callback(null, result.success)
        }
        return callback("create failed: unknown result")
    }
        public complete(id: number, callback: (e: Error, r: boolean) => void): void
    public complete(id: number, ): Promise<boolean>
    public complete(id: number, callback?: (e: Error, r: boolean) => void): Promise<boolean>|void {
        this._seqid = this.new_seqid(V)
        if (callback instanceof Function) {
            return new Promise((resolve, reject) => {
                this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                        reject(error)
                    } else {
                        resolve(result)
                    }
                }
                this.send_complete(id, )
            })
        } else {
            this._reqs[this.seqid()] = callback
            this.send_complete(id )
        }
    }

    public send_complete(id: number, ): void {
        const output = new this.pClass(this.output)
        output.writeMessageBegin("complete", Thrift.MessageType.CALL, this.seqid())
        const args = new TodoServiceCompleteArgs({ id,  })
        args.write(output)
        output.writeMessageEnd()
        return this.output.flush()
    }

    public recv_complete(input: Protocol, mtype: Thrift.MessageType, rseqid: number): void {
        const noop = () => null
        let callback = this._reqs[rseqid] || noop
        delete this._reqs[rseqid]
        if (mtype === Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException()
            x.read(input)
            input.readMessageEnd()
            return callback(x)
        }
        const result = new TodoServiceCompleteResult()
        result.read(input)
        input.readMessageEnd()

        if (result.ex != null) {
            return callback(result.ex)
        }
        if (result.success != null) {
            return callback(null, result.success)
        }
        return callback("complete failed: unknown result")
    }
        public remove(id: number, callback: (e: Error, r: boolean) => void): void
    public remove(id: number, ): Promise<boolean>
    public remove(id: number, callback?: (e: Error, r: boolean) => void): Promise<boolean>|void {
        this._seqid = this.new_seqid(V)
        if (callback instanceof Function) {
            return new Promise((resolve, reject) => {
                this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                        reject(error)
                    } else {
                        resolve(result)
                    }
                }
                this.send_remove(id, )
            })
        } else {
            this._reqs[this.seqid()] = callback
            this.send_remove(id )
        }
    }

    public send_remove(id: number, ): void {
        const output = new this.pClass(this.output)
        output.writeMessageBegin("remove", Thrift.MessageType.CALL, this.seqid())
        const args = new TodoServiceRemoveArgs({ id,  })
        args.write(output)
        output.writeMessageEnd()
        return this.output.flush()
    }

    public recv_remove(input: Protocol, mtype: Thrift.MessageType, rseqid: number): void {
        const noop = () => null
        let callback = this._reqs[rseqid] || noop
        delete this._reqs[rseqid]
        if (mtype === Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException()
            x.read(input)
            input.readMessageEnd()
            return callback(x)
        }
        const result = new TodoServiceRemoveResult()
        result.read(input)
        input.readMessageEnd()

        if (result.ex != null) {
            return callback(result.ex)
        }
        if (result.success != null) {
            return callback(null, result.success)
        }
        return callback("remove failed: unknown result")
    }
    }

export class Processor {
    private _handler

    constructor(handler) {
        this._handler = handler
    }

    public process(input: Protocol, output: Protocol) {
        const r = input.readMessageBegin()
        if (this["process_" + r.fname]) {
            return this["process_" + r.fname].call(this, r.rseqid, input, output)
        } else {
            input.skip(Thrift.Type.STRUCT)
            input.readMessageEnd()
            const err = `Unknown function ${r.fname}`
            const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, err)
            output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid)
            x.write(output)
            output.writeMessageEnd()
            output.flush()
        }
    }

    public process_all(seqid: number, input: Protocol, output: Protocol) {
        const args = new TodoServiceAllArgs()
        args.read(input)
        input.readMessageEnd()
        if (this._handler.all.length === 0) {
            Promise.resolve(this._handler.all).then((data) => {
                const result = new TodoServiceAllResult({success: data})
                output.writeMessageBegin("all", Thrift.MessageType.REPLY, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            }, (err) => {
                const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                output.writeMessageBegin("all", Thrift.MessageType.EXCEPTION, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        } else {
            this._handler.all((err, data) => {
                let result
                if (err == null) {
                    result = new TodoServiceAllResult((err != null ? err : {success: data}))
                    output.writeMessageBegin("all", Thrift.MessageType.REPLY, seqid)
                } else {
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                    output.writeMessageBegin("all", Thrift.MessageType.EXCEPTION, seqid)
                }
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        }
    }
    public process_findByName(seqid: number, input: Protocol, output: Protocol) {
        const args = new TodoServiceFindByNameArgs()
        args.read(input)
        input.readMessageEnd()
        if (this._handler.findByName.length === 1) {
            Promise.resolve(this._handler.findByName, args.name).then((data) => {
                const result = new TodoServiceFindByNameResult({success: data})
                output.writeMessageBegin("findByName", Thrift.MessageType.REPLY, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            }, (err) => {
                const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                output.writeMessageBegin("findByName", Thrift.MessageType.EXCEPTION, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        } else {
            this._handler.findByName(args.name, (err, data) => {
                let result
                if (err == null) {
                    result = new TodoServiceFindByNameResult((err != null ? err : {success: data}))
                    output.writeMessageBegin("findByName", Thrift.MessageType.REPLY, seqid)
                } else {
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                    output.writeMessageBegin("findByName", Thrift.MessageType.EXCEPTION, seqid)
                }
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        }
    }
    public process_findById(seqid: number, input: Protocol, output: Protocol) {
        const args = new TodoServiceFindByIdArgs()
        args.read(input)
        input.readMessageEnd()
        if (this._handler.findById.length === 1) {
            Promise.resolve(this._handler.findById, args.id).then((data) => {
                const result = new TodoServiceFindByIdResult({success: data})
                output.writeMessageBegin("findById", Thrift.MessageType.REPLY, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            }, (err) => {
                const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                output.writeMessageBegin("findById", Thrift.MessageType.EXCEPTION, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        } else {
            this._handler.findById(args.id, (err, data) => {
                let result
                if (err == null) {
                    result = new TodoServiceFindByIdResult((err != null ? err : {success: data}))
                    output.writeMessageBegin("findById", Thrift.MessageType.REPLY, seqid)
                } else {
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                    output.writeMessageBegin("findById", Thrift.MessageType.EXCEPTION, seqid)
                }
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        }
    }
    public process_create(seqid: number, input: Protocol, output: Protocol) {
        const args = new TodoServiceCreateArgs()
        args.read(input)
        input.readMessageEnd()
        if (this._handler.create.length === 1) {
            Promise.resolve(this._handler.create, args.requestContext).then((data) => {
                const result = new TodoServiceCreateResult({success: data})
                output.writeMessageBegin("create", Thrift.MessageType.REPLY, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            }, (err) => {
                const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                output.writeMessageBegin("create", Thrift.MessageType.EXCEPTION, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        } else {
            this._handler.create(args.requestContext, (err, data) => {
                let result
                if (err == null) {
                    result = new TodoServiceCreateResult((err != null ? err : {success: data}))
                    output.writeMessageBegin("create", Thrift.MessageType.REPLY, seqid)
                } else {
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                    output.writeMessageBegin("create", Thrift.MessageType.EXCEPTION, seqid)
                }
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        }
    }
    public process_complete(seqid: number, input: Protocol, output: Protocol) {
        const args = new TodoServiceCompleteArgs()
        args.read(input)
        input.readMessageEnd()
        if (this._handler.complete.length === 1) {
            Promise.resolve(this._handler.complete, args.id).then((data) => {
                const result = new TodoServiceCompleteResult({success: data})
                output.writeMessageBegin("complete", Thrift.MessageType.REPLY, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            }, (err) => {
                const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                output.writeMessageBegin("complete", Thrift.MessageType.EXCEPTION, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        } else {
            this._handler.complete(args.id, (err, data) => {
                let result
                if (err == null) {
                    result = new TodoServiceCompleteResult((err != null ? err : {success: data}))
                    output.writeMessageBegin("complete", Thrift.MessageType.REPLY, seqid)
                } else {
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                    output.writeMessageBegin("complete", Thrift.MessageType.EXCEPTION, seqid)
                }
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        }
    }
    public process_remove(seqid: number, input: Protocol, output: Protocol) {
        const args = new TodoServiceRemoveArgs()
        args.read(input)
        input.readMessageEnd()
        if (this._handler.remove.length === 1) {
            Promise.resolve(this._handler.remove, args.id).then((data) => {
                const result = new TodoServiceRemoveResult({success: data})
                output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            }, (err) => {
                const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        } else {
            this._handler.remove(args.id, (err, data) => {
                let result
                if (err == null) {
                    result = new TodoServiceRemoveResult((err != null ? err : {success: data}))
                    output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid)
                } else {
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                    output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid)
                }
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        }
    }
    
}
