/**
 * Generated by Scrooge
 *   version: 4.13.0-SNAPSHOT
 *   rev: 37381b506e4da989e44d86ebf4c7f8eb1e08ca2e
 *   built at: 20170322-170711
 */
/**
 * It's considered good form to declare an exception type for your service.
 * Thrift will serialize and transmit them transparently.
 */


import thrift from 'thrift'
import {Q, Thrift} from 'thrift'



export class TodoException {
    public description: string
    constructor(args?) {
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            switch (fid) {
                case 1:
                    // reading description
                    this.description = input.readString()
                    break

                default:
                    input.skip(ftype)
            }
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("TodoException")
        if (this.description !== null && this.description !== undefined) {
            // writing description
            if (this.description !== null) {
                const description_item = this.description
                output.writeFieldBegin("description", Thrift.Type.STRING, 1)
                output.writeString(description_item)
                output.writeFieldEnd()
            }
        }
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}