{{#docstring}}
{{docstring}}
{{/docstring}}

// Import this file with:
// import { {{StructName}} } from '{{package}}'
// Note: This file depends on libthrift!

import thrift from 'thrift'
import {Q, Thrift} from 'thrift'

{{requireStatements}}

export class {{StructName}} {
    public success: boolean
    {{#each fields}}
    public {{fieldName}}: {{fieldType}}
    {{/each}}
    constructor(args?) {
        {{#if fields}}
        if (args) {
            {{#each fields}}
            if (args.{{name}} !== undefined && args.{{name}} !== null) {
                this.{{name}} = args.{{name}}
            } else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field {{fieldName}} is unset!')
            }
            {{/each}}
        }
        {{/if}}
    }

    public read(input) {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
            {{#if fields}}
            switch (fid) {
                {{#each fields}}case {{id}}:
                    {{>readField}}
                    break
                {{/each}}
                default:
                    input.skip(ftype)
            }
            {{else}}
            input.skip(ftype)
            {{/if}}
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output) {
        output.writeStructBegin("{{StructName}}")
        {{#each fields}}
        if (this.{{name}} !== null && this.{{name}} !== undefined) {
            {{>writeField}}
            output.writeFieldEnd()
        }
        {{/each}}
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}
