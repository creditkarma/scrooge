{{#docstring}}
{{docstring}}
{{/docstring}}
{{#importDoc}}
{{>importDoc}}

import thrift from 'thrift'
import {Thrift, Protocol} from 'thrift'

{{requireStatements}}
{{/importDoc}}

{{#has_fields}}
export interface I{{StructName}}Args {
{{#fields}}
    {{fieldName}}{{#optional}}?{{/optional}}: {{fieldType}}
{{/fields}}
}
{{/has_fields}}

export class {{StructName}} {
{{#fakeFields}}
    public {{fieldName}}: {{fieldType}}
{{/fakeFields}}
{{#fields}}
    public {{fieldName}}: {{fieldType}}
{{/fields}}
    constructor(args{{^has_fields}}?: {}{{/has_fields}}{{#has_fields}}: I{{StructName}}Args{{/has_fields}}) {
{{#fields}}
            if (args.{{fieldName}} != null) {
                this.{{fieldName}} = args.{{fieldName}}
            }{{^optional}} else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field {{fieldName}} is unset!')
            }{{/optional}}
{{/fields}}
    }

    public read(input: Protocol): void {
        input.readStructBegin()
        while (true) {
            const {fname, ftype, fid} = input.readFieldBegin()
            if (ftype === Thrift.Type.STOP) {
                break
            }
{{#has_fields}}
            switch (fid) {
{{#fields}}
                case {{id}}:
                    {{>readField}}
                    break
{{/fields}}
                default:
                    input.skip(ftype)
            }
{{/has_fields}}
{{^has_fields}}
            input.skip(ftype)
{{/has_fields}}
            input.readFieldEnd()
        }
        input.readStructEnd()
        return
    }

    public write(output: Protocol): void {
        output.writeStructBegin("{{StructName}}")
{{#fields}}
        if (this.{{fieldName}} != null) {
            {{>writeField}}
        }
{{/fields}}
        output.writeFieldStop()
        output.writeStructEnd()
        return
    }
}
