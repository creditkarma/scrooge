import thrift from 'thrift'
import {Thrift, Q} from 'thrift'

{{#structs}}
import { {{StructName}} } from './{{StructName}}'
{{/structs}}

{{#syncFunctionStructs}}
{{#argsStruct}}{{>struct}}{{/argsStruct}}
{{#resultStruct}}{{>struct}}{{/resultStruct}}
{{/syncFunctionStructs}}

export class Client {
    public output
    public pClass
    private _seqid
    public _reqs

    constructor(output, pClass) {
        this.output = output
        this.pClass = pClass
        this._seqid = 0
        this._reqs = {}
    }

    public seqid() {
        return this._seqid
    }

    public new_seqid() {
        return this._seqid += 1
    }

    {{#syncFunctions}}
    public {{name}}({{#args}}{{fieldName}}: {{fieldType}}, {{/args}}callback?): Promise<{{typeName}}>|undefined {
        this._seqid = this.new_seqid()
        if (callback === undefined) {
            let defer = Q.defer()
            this._reqs[this.seqid()] = function(error, result) {
                if (error) {
                    defer.reject(error)
                } else {
                    defer.resolve(result)
                }
            }
            this.send_{{name}}({{#args}}{{fieldName}}, {{/args}})
            return defer.promise
        } else {
            this._reqs[this.seqid()] = callback
            this.send_{{name}}({{#args}}{{fieldName}} {{/args}})
        }
    }

    public send_{{name}}({{#args}}{{fieldName}}: {{fieldType}}, {{/args}}) {
        const output = new this.pClass(this.output)
        output.writeMessageBegin("{{name}}", Thrift.MessageType.CALL, this.seqid())
        const args = new {{ServiceName}}{{nameTitleCase}}Args()
        {{#args}}args.{{fieldName}} = {{fieldName}}{{/args}}
        args.write(output)
        output.writeMessageEnd()
        return this.output.flush()
    }

    public recv_{{name}}(input, mtype, rseqid) {
        const noop = () => null
        let callback = this._reqs[rseqid] || noop
        delete this._reqs[rseqid]
        if (mtype === Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException()
            x.read(input)
            input.readMessageEnd()
            return callback(x)
        }
        const result = new {{ServiceName}}{{nameTitleCase}}Result()
        result.read(input)
        input.readMessageEnd()

        if (null !== result.success) {
            return callback(null, result.success)
        }
        return callback("{{name}} failed: unknown result")
    }
    {{/syncFunctions}}
}

export class Processor {
    private _handler

    constructor(handler) {
        this._handler = handler
    }

    public process(input, output) {
        const r = input.readMessageBegin()
        if (this["process_" + r.fname]) {
            return this["process_" + r.fname].call(this, r.rseqid, input, output)
        } else {
            input.skip(Thrift.Type.STRUCT)
            input.readMessageEnd()
            const err = `Unknown function ${r.fname}`
            const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, err)
            output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid)
            x.write(output)
            output.writeMessageEnd()
            output.flush()
        }
    }

    {{#syncFunctions}}public process_{{name}}(seqid, input, output) {
        const args = new {{ServiceName}}{{nameTitleCase}}Args()
        args.read(input)
        input.readMessageEnd()
        if (this._handler.{{name}}.length === {{argsLength}}) {
            Q.fcall(this._handler.{{name}}{{#args}}, args.{{fieldName}}{{/args}}).then((data) => {
                const result = new {{ServiceName}}{{nameTitleCase}}Result({success: data})
                output.writeMessageBegin("{{name}}", Thrift.MessageType.REPLY, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            }, (err) => {
                const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                output.writeMessageBegin("{{name}}", Thrift.MessageType.EXCEPTION, seqid)
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        } else {
            this._handler.{{name}}({{#args}}args.{{fieldName}}, {{/args}}(err, data) => {
                let result
                if (err == null) {
                    result = new {{ServiceName}}{{nameTitleCase}}Result((err != null ? err : {success: data}))
                    output.writeMessageBegin("{{name}}", Thrift.MessageType.REPLY, seqid)
                } else {
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
                    output.writeMessageBegin("{{name}}", Thrift.MessageType.EXCEPTION, seqid)
                }
                result.write(output)
                output.writeMessageEnd()
                output.flush()
            })
        }
    }
    {{/syncFunctions}}
}

